extends day

block description
  | Faking stuff is never good, except when your writing tests.

block research
  p
    | Mock objects are used to eliminate test dependencies on other objects. Consider a method that makes an Ajax request. If the server is down, the test will fail to return a valid result, despite the code being perfectly fine. This is the perfect case for using a mock object.
  p
    a.btn(href="https://github.com/yui/yuitest/wiki/Mock-Objects") Mock Objects in YUI Test  &raquo;
  p
    | So far, we've run a majority of our tests from inside of NodeJS. But what happens when we want our script needs the DOM to operate? There's no need to give up; we can mock the DOM in Node using <a href="https://github.com/tmpvar/jsdom">jsdom, a JavaScript implementation of the W3C DOM</a>.
  p
    a.btn(href="http://yuilibrary.com/yui/docs/yui/nodejs-dom.html") Mocking the DOM in NodeJS with YUI and jsdom &raquo;
  p
    | Mocks help get rid of dependencies, but what do we do when  a function has indirect outputs to other software components, instead of a specific return value? This is when 'spies' come in handy.
  blockquote
    | We can use test spies and make assertions on things such as the number of calls, arguments passed to specific functions, return values and more.
  p
    a.btn(href="http://cjohansen.no/en/javascript/javascript_test_spies_stubs_and_mocks#toc80380_3") Test Spies in Sinon.js &raquo;

block resources
  ul
    li
      a(href="http://www.nczonline.net/blog/2009/11/17/the-curious-case-of-javascript-unit-testing/") The curious case of JavaScript unit testing
    li
      a(href="http://www.pabich.eu/2010/07/java-script-unit-testing-with-yui-test.html") JavaScript unit testing with YUI Test and Jack mocking framework
    li
      a(href="http://cjohansen.no/en/javascript/sinon_js_0_6_0_fake_xmlhttprequest_and_improved_test_framework_integration") Testing "Ajax" Code

block assignment
  p
    | Using the tests in the Spoilr exercise recently completed, convert them to run inside of NodeJS (instead of a browser).
  ul
    li In your existing Spoilr workspace, create a new file called 'spoilr-node.js'.
    li In that file, following the directions in the 'YUI and jsdom' article, set up an environment for executing the Spoilr-tests.js file in NodeJS.
    ul
      li You'll need to update the HTML created initially by jsdom so that it has the  HTML elements you need for your tests
      li You'll need to load the 'spoilr.js' and 'spoilr-tests.js' files either by using 'require' (e.g. <code>var spoilr = require('./spoilr.js');</code>) or loading them as modules in YUI.
      li Inside your YUI().use() callback function, all you need to do is simply call the YUI test runner: <code>Y.Test.Runner.run();</code>

    li Run your tests with the command "<kbd>node spoilr-node.js</kbd>"

  .alert.alert-warn
    | jsdom does not currently fire <a href="https://github.com/tmpvar/jsdom/issues/533">'focus' and 'blur' events</a>, so one of your tests will fail. This is the trouble with trying to emulate a browser environment outside of the browser and why tools like PhantomJS and Yeti (which we'll talk about tomorrow) are so helpful.
//
  p
    | To test spies and mocks, we'll write tests for a simple function that adds a class name to a DOM element.
