extends day

block description
  | We change our thinking with a twist on TDD and a new test framework

block research
  p
    | We've studied YUI Test some, but it's a good idea to look at other frameworks as well. Along with that, let's take a quick look at another testing theory: "Behavior Driven Development". Luckily, the article below covers both topics.
  p
    a.btn(href="http://net.tutsplus.com/tutorials/javascript-ajax/testing-your-javascript-with-jasmine/") Testing Your JavaScript with Jasmine &raquo;
  p
    | This short YUIConf talk reinforces what BDD is about. He shows off a gallery module he's written to help convert YUI Test assertions and setup into a more BDD friendly format.
  p
    a.btn(href="http://youtu.be/JGoNbSWUTuI?t=30m56s") Behavior-Driven Development for YUI Â»

block resources
  ul
    li 
      a(href="http://randomjavascript.blogspot.com/2012/12/using-jasmine-node-to-test-your-node.html") Getting Jasmine working with Node.js
    li
      a(href="http://net.tutsplus.com/tutorials/javascript-ajax/better-coffeescript-testing-with-mocha/") CoffeeScript and Mocha (with Chai)

block assignment
  p
    p
      | You've been tasked with writing unit tests for <a href="https://gist.github.com/klamping/5360521">two 'fizz buzz' functions</a>. One of the functions doesn't work in a specific way; it's your job to find out which function is broken.
    p
      | Unfortunately, the code has been obfuscated, so unless you cheat (don't cheat), you don't know which function is broken. To find out, you're going to write some tests that check the functions to see which one is broken and why.
    ul
      li Create a list of test names from the requirements below
      li Using Jasmine*, write your tests to validate FizzBuzz's behavior
      li Once you tests are written, add the two functions to the page and pass them in to the test cases
      li Send me your workspace along with your answer to which fizzBuzz is broken and why

    h3 FizzBuzz Requirements
    p
      | FizzBuzz is a function that receives a number as its argument;
    ul
      li
       | if the number is divisible by 3, the function should return 'fizz';
      li
       | if the number is divisible by 5, the function should return 'buzz';
      li
       | if the number is divisible by 3 and 5, the function should return 'fizzbuzz';
      li
       | otherwise the function should return the number, or false if no number was provided or if the value provided was not a number

    h3 *Steps for using <a href="https://github.com/mhevery/jasmine-node">Jasmine-node</a> in Cloud9

    ul
      li Create a new C9 workspace with Node.js as the backend
      li In the terminal, run 'npm install jasmine-node'
      li Change the extension on 'hello-world.js' to be '.spec.js' (hello-world.js -> hello-world.spec.js)
      li Write a Jasmine test
      li In the terminal, run 'jasmine-node ./' (this will execute all test in files with an extension of .spec.js)
